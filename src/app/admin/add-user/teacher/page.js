"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Search, ArrowLeft, Users, Eye, EyeOff, Trash2 } from "lucide-react";

export default function ViewTeacherPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [teacherList, setTeacherList] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showPasswords, setShowPasswords] = useState({});
  const router = useRouter();

  useEffect(() => {
    fetchTeachers();
  }, []);

  const fetchTeachers = async () => {
    try {
      const res = await fetch("/api/view-users?type=р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М");
      const data = await res.json();
      if (data.success) {
        setTeacherList(data.data);
      } else {
        console.error("тЪая╕П р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М");
      }
    } catch (error) {
      console.error("тЪая╕П Error fetching teachers:", error);
    } finally {
      setLoading(false);
    }
  };

  const togglePasswordVisibility = (id) => {
    setShowPasswords((prev) => ({
      ...prev,
      [id]: !prev[id],
    }));
  };

  const handleDelete = async (userID) => {
    if (!confirm("р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Щр╕╡р╣Йр╣Гр╕Кр╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И?")) return;
    try {
      const res = await fetch("/api/delete-user", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userID }),
      });
      const data = await res.json();
      if (data.success) {
        alert("тЬЕ р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И");
        fetchTeachers();
      } else {
        alert("тЭМ р╕ер╕Ър╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И");
      }
    } catch (error) {
      console.error("тЭМ Error deleting user:", error);
    }
  };

  const handleDeleteAll = async () => {
    if (!confirm("тЪая╕П р╕Др╕╕р╕Ур╣Бр╕Щр╣Ир╣Гр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╕зр╣Ир╕▓р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╕кр╕Цр╕▓р╕Щр╕░ 'р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М'?")) return;
    try {
      const res = await fetch("/api/delete-user-type", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: "р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М" }),
      });
      const data = await res.json();
      if (data.success) {
        alert("тЬЕ р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И");
        fetchTeachers();
      } else {
        alert("тЭМ р╕ер╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И");
      }
    } catch (error) {
      console.error("тЭМ Error deleting user type:", error);
    }
  };

  const filteredTeachers = teacherList.filter((teacher) =>
    teacher.Name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleBack = () => {
    router.push("/admin/view-borrow");
  };

  const navigateToPage = (page) => {
    router.push(`/admin/add-user/${page}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 p-6 pb-24 flex flex-col items-center">
      <div className="w-full max-w-4xl bg-white p-4 shadow-lg flex items-center justify-between rounded-lg mb-6">
        <div className="flex items-center">
          <button onClick={handleBack} className="text-blue-500 hover:text-blue-700 transition">
            <ArrowLeft size={26} />
          </button>
          <h2 className="text-xl font-semibold text-gray-800 ml-4">ЁЯУЪ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М</h2>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => router.push("/admin/add-user")}
            className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 flex items-center transition"
          >
            <Users size={20} className="mr-2" /> р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
          </button>
          <button
            onClick={handleDeleteAll}
            className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 flex items-center transition"
          >
            <Trash2 size={20} className="mr-2" /> р╕ер╕Ър╕нр╕▓р╕Ир╕▓р╕гр╕вр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
          </button>
        </div>
      </div>

      <div className="w-full max-w-4xl bg-white p-4 shadow-md rounded-lg mb-6 flex items-center">
        <input
          type="text"
          placeholder="ЁЯФН р╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full border-none p-3 rounded-l-md bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-700"
        />
        <button className="bg-blue-500 text-white px-4 py-2 rounded-r-md hover:bg-blue-600 transition">
          <Search size={22} />
        </button>
      </div>

      <div className="w-full max-w-4xl space-y-4">
        {loading ? (
          <p className="text-gray-600 text-center">тП│ р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е...</p>
        ) : filteredTeachers.length > 0 ? (
          filteredTeachers.map((teacher) => (
            <div
              key={teacher.userID}
              className="bg-white p-6 shadow-md rounded-lg flex justify-between items-center hover:shadow-xl transition"
            >
              <div>
                <p className="font-bold text-lg text-gray-800">ЁЯУМ {teacher.Name}</p>
                <p className="text-gray-600">ЁЯУЮ {teacher.phoneNumber}</p>
                <p className="text-gray-600">ЁЯУз {teacher.email}</p>
                <p className="text-gray-600">ЁЯЖФ {teacher.userID}</p>
                <p className="text-gray-600">ЁЯУМ р╕кр╕Цр╕▓р╕Щр╕░: {teacher.status}</p>
                <div className="flex items-center space-x-2 mt-2">
                  <p className="text-gray-600">ЁЯФС р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ:</p>
                  <span className="text-gray-800 font-mono bg-gray-200 px-2 py-1 rounded">
                    {showPasswords[teacher.userID] ? teacher.password : "тАвтАвтАвтАвтАвтАвтАвтАв"}
                  </span>
                  <button
                    onClick={() => togglePasswordVisibility(teacher.userID)}
                    className="text-blue-500 hover:text-blue-700 transition"
                  >
                    {showPasswords[teacher.userID] ? <EyeOff size={18} /> : <Eye size={18} />}
                  </button>
                </div>
              </div>
              <div className="flex space-x-2">
                <button
                  className="bg-yellow-500 text-white px-4 py-2 rounded-md shadow-md hover:bg-yellow-600 transition"
                  onClick={() => router.push(`/admin/add-user/edit-user?id=${teacher.userID}`)}
                >
                  тЬПя╕П р╣Бр╕Бр╣Йр╣Др╕В
                </button>
                <button
                  onClick={() => handleDelete(teacher.userID)}
                  className="bg-red-500 text-white px-4 py-2 rounded-md shadow-md hover:bg-red-600 transition"
                >
                  ЁЯЧСя╕П р╕ер╕Ъ
                </button>
              </div>
            </div>
          ))
        ) : (
          <p className="text-gray-600 text-center">тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М</p>
        )}
      </div>

      <div className="w-full max-w-4xl flex justify-between mt-8">
        <button
          className="bg-green-500 text-white px-6 py-3 rounded-md shadow-md hover:bg-green-600 transition"
          onClick={() => navigateToPage("student")}
        >
          ЁЯОУ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╕Бр╕ир╕╢р╕Бр╕йр╕▓
        </button>
        <button
          className="bg-blue-500 text-white px-6 py-3 rounded-md shadow-md hover:bg-blue-600 transition"
          onClick={() => navigateToPage("teacher")}
        >
          ЁЯУЪ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М
        </button>
        <button
          className="bg-purple-500 text-white px-6 py-3 rounded-md shadow-md hover:bg-purple-600 transition"
          onClick={() => navigateToPage("admin")}
        >
          ЁЯПв р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
        </button>
      </div>
    </div>
  );
}
