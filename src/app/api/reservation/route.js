import { NextResponse } from "next/server";
import { getServerSession } from "next-auth"; // ‚úÖ ‡πÉ‡∏ä‡πâ getServerSession ‡∏î‡∏∂‡∏á session
import { authOptions } from "@/app/api/auth/[...nextauth]/route"; // ‚úÖ ‡πÉ‡∏ä‡πâ Path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import pool from "../../../../lib/mysql";
import fs from "fs/promises";
import path from "path";

export async function POST(req) {
    try {
        // ‚úÖ ‡∏î‡∏∂‡∏á session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user
        const session = await getServerSession(authOptions);
        if (!session || !session.user) {
            return NextResponse.json({ success: false, message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 401 });
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ formData() ‡πÅ‡∏ó‡∏ô json()
        const formData = await req.formData();

        // ‚ùå userID ‡πÅ‡∏•‡∏∞ reserverName ‡∏´‡πâ‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å session ‡πÅ‡∏ó‡∏ô!
        const reserverName = session.user.name;
        const userID = session.user.id;

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        const reservedEquipments = formData.get("reservedEquipments");
        const startDate = formData.get("startDate");
        const endDate = formData.get("endDate");
        const courseCode = formData.get("courseCode");
        const usageReason = formData.get("usageReason");
        const documentFile = formData.get("document"); // üìù ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£

        let documentPath = "";
        if (documentFile && documentFile.name) {
            // üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
            const uploadDir = path.join(process.cwd(), "public/uploads");
            await fs.mkdir(uploadDir, { recursive: true });

            const fileName = Date.now() + "_" + documentFile.name;
            documentPath = `/uploads/${fileName}`;

            const buffer = await documentFile.arrayBuffer();
            await fs.writeFile(path.join(uploadDir, fileName), Buffer.from(buffer));
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userID ‡πÉ‡∏ô database
        const [userCheck] = await pool.query("SELECT * FROM user WHERE userID = ?", [userID]);
        if (userCheck.length === 0) {
            throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö userID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const [result] = await pool.query(
            `INSERT INTO reservation (reserverName, userID, reservedEquipments, startDate, endDate, courseCode, usageReason, document, status) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'Pending')`,
            [reserverName, userID, reservedEquipments, startDate, endDate, courseCode, usageReason, documentPath]
        );

        return NextResponse.json({
            success: true,
            message: "‚úÖ ‡∏à‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data: result,
        });

    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        return NextResponse.json(
            { success: false, message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ" },
            { status: 500 }
        );
    }
}
