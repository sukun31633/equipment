"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { ArrowLeft, Save } from "lucide-react";

export default function EditUserPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const id = searchParams.get("id");

  const [user, setUser] = useState({
    Name: "",
    phoneNumber: "",
    email: "",
    password: "",
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!id) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      router.push("/admin/view-users");
      return;
    }

    const fetchUser = async () => {
      try {
        // ‡πÉ‡∏ä‡πâ API /api/view-userall ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const res = await fetch(`/api/view-userall`);
        const data = await res.json();

        if (data.success && data.data.length > 0) {
          // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ userID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å query
          const foundUser = data.data.find((user) => user.userID.toString() === id);
          if (foundUser) {
            setUser(foundUser);
          } else {
            alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
            router.push("/admin/view-users");
          }
        } else {
          alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
          router.push("/admin/view-users");
        }
      } catch (error) {
        console.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ");
        router.push("/admin/view-users");
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, [id]);

  const handleChange = (e) => {
    setUser({ ...user, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch(`/api/update-user`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(user),
      });

      const data = await res.json();
      if (data.success) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        router.push("/admin/view-users");
      } else {
        alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      alert("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  if (loading) return <p className="text-center text-gray-600">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-6">
      {/* üîπ Header */}
      <div className="w-full max-w-2xl bg-white p-4 shadow-lg flex items-center justify-between rounded-lg mb-6">
        <button onClick={() => router.back()} className="text-blue-500 flex items-center">
          <ArrowLeft size={24} className="mr-2" /> ‡∏Å‡∏•‡∏±‡∏ö
        </button>
        <h2 className="text-lg font-semibold text-gray-800">üõ†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
      </div>

      {/* üîπ Form ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <form onSubmit={handleSubmit} className="w-full max-w-2xl bg-white p-6 shadow-lg rounded-lg">
        <div className="grid grid-cols-1 gap-4">
          {/* üîπ ‡∏ä‡∏∑‡πà‡∏≠ */}
          <div>
            <label className="block text-gray-700 font-medium">üì¶ ‡∏ä‡∏∑‡πà‡∏≠</label>
            <input
              type="text"
              name="name"
              value={user.Name}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* üîπ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ */}
          <div>
            <label className="block text-gray-700 font-medium">üìû ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
            <input
              type="text"
              name="phoneNumber"
              value={user.phoneNumber}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          </div>

          {/* üîπ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå */}
          <div>
            <label className="block text-gray-700 font-medium">üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
            <input
              type="email"
              name="email"
              value={user.email}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          </div>

          {/* üîπ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
          <div>
            <label className="block text-gray-700 font-medium">üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
            <input
              type="password"
              name="password"
              value={user.password}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          </div>

          {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={() => router.back()}
              className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition"
            >
               ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
            <button
              type="submit"
              className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center hover:bg-blue-600 transition"
            >
              <Save size={18} className="mr-2" />  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
