// app/api/notifications/checkReminders/route.js

import pool from '../../../../../lib/mysql';
import nodemailer from 'nodemailer';
import twilio from 'twilio';
import { NextResponse } from 'next/server';
import dayjs from 'dayjs';

// 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Nodemailer ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Gmail
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASS,
  },
});

// 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á Twilio client
const twilioClient = twilio(
  process.env.TWILIO_ACCOUNT_SID,
  process.env.TWILIO_AUTH_TOKEN
);

// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô E.164 (+66...)
function formatPhone(phone) {
  const p = phone.trim();
  return p.startsWith('0') ? '+66' + p.slice(1) : p;
}

// helper: ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô DD-MM-YYYY
function formatDate(date) {
  return dayjs(date).format('DD-MM-YYYY');
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function sendEmail(to, subject, html) {
  try {
    await transporter.sendMail({
      from: process.env.GMAIL_USER,
      to,
      subject,
      html,
    });
    console.log(`‚úÖ Email sent to ${to}: ${subject}`);
  } catch (err) {
    console.error(`‚ùå Failed to send email to ${to}:`, err);
  }
}

// ‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
async function sendSMS(message) {
  const TEST_PHONE = '0999719451';
  const to = formatPhone(TEST_PHONE);
  try {
    await twilioClient.messages.create({
      body: message,
      from: process.env.TWILIO_PHONE_NUMBER,
      to,
    });
    console.log(`‚úÖ SMS sent to ${to}: ${message}`);
  } catch (err) {
    console.error(`‚ùå Failed to send SMS to ${to}:`, err);
  }
}

// ‡∏≠‡πà‡∏≤‡∏ô setting ‡∏ß‡πà‡∏≤ user ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function getUserNotificationSettings(userID) {
  try {
    const [rows] = await pool.query(
      `SELECT smsNotification, emailNotification FROM user WHERE userID = ?`,
      [userID]
    );
    if (!rows.length) return { sms: 'disabled', email: 'disabled' };
    const { smsNotification, emailNotification } = rows[0];
    return {
      sms: smsNotification === 'enabled' ? 'enabled' : 'disabled',
      email: emailNotification === 'enabled' ? 'enabled' : 'disabled',
    };
  } catch (err) {
    console.error('Error fetching notification settings:', err);
    return { sms: 'disabled', email: 'disabled' };
  }
}

export async function GET() {
  try {
    const today = new Date();
    const fmt = d => d.toISOString().slice(0, 10);
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    const dY = fmt(yesterday), dT = fmt(tomorrow);

    // ‡∏î‡∏∂‡∏á Overdue ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° JOIN ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å user
    const [overdueBorrow] = await pool.query(
      `SELECT b.*, u.email AS userEmail, u.userID
       FROM borrowing b
       JOIN user u ON b.userID = u.userID
       WHERE DATE(b.endDate)=? AND b.status='Overdue'`,
      [dY]
    );
    const [overdueRes] = await pool.query(
      `SELECT r.*, u.email AS userEmail, u.userID
       FROM reservation r
       JOIN user u ON r.userID = u.userID
       WHERE DATE(r.endDate)=? AND r.status='Overdue'`,
      [dY]
    );

    // ‡∏î‡∏∂‡∏á‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏° JOIN ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å user
    const [borrowTomorrow] = await pool.query(
      `SELECT b.*, u.email AS userEmail, u.userID
       FROM borrowing b
       JOIN user u ON b.userID = u.userID
       WHERE DATE(b.endDate)=? AND b.status='Borrowed'`,
      [dT]
    );
    const [resTomorrow] = await pool.query(
      `SELECT r.*, u.email AS userEmail, u.userID
       FROM reservation r
       JOIN user u ON r.userID = u.userID
       WHERE DATE(r.endDate)=? AND r.status='Borrowed'`,
      [dT]
    );

    const overdueList = [...overdueBorrow, ...overdueRes];
    const reminderList = [...borrowTomorrow, ...resTomorrow];

    // 1) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Overdue
    for (const item of overdueList) {
      const name = item.borrowerName || item.reserverName;
      const email = item.userEmail;
      const settings = await getUserNotificationSettings(item.userID);
      const dateStr = formatDate(item.endDate);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
      if (settings.email === 'enabled') {
        await sendEmail(
          email,
          'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
          `<p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì ${name},</p>
           <p>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${dateStr} ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô</p>
           <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô ‡∏ä‡∏±‡πâ‡∏ô 4</p>`
        );
      }
      // ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠
      await sendEmail(
        'jingpt888@gmail.com',
        `üìã ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${name}`,
        `<p>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${name} (${item.userID})</p>
         <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${item.status}</p>
         <p>‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${dateStr} (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)</p>`
      );
      // ‡∏™‡πà‡∏á SMS ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠
      await sendSMS(
        `üì± ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${name} (${item.userID}) ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${item.status} ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${dateStr}`
      );

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á SMS (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
      if (settings.sms === 'enabled') {
        await sendSMS(
          `üì± ‡∏Ñ‡∏∏‡∏ì ${name}, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô ${dateStr} ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
        );
      }
    }

    // 2) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
    for (const item of reminderList) {
      const name = item.borrowerName || item.reserverName;
      const email = item.userEmail;
      const settings = await getUserNotificationSettings(item.userID);
      const dateStr = formatDate(item.endDate);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
      if (settings.email === 'enabled') {
        await sendEmail(
          email,
          'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
          `<p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì ${name},</p>
           <p>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (${dateStr})</p>
           <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏ä‡∏±‡πâ‡∏ô 4</p>`
        );
      }
      // ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠
      await sendEmail(
        'jingpt888@gmail.com',
        `üìã ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: ${name}`,
        `<p>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${name} (${item.userID})</p>
         <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${item.status}</p>
         <p>‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${dateStr} (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)</p>`
      );
      // ‡∏™‡πà‡∏á SMS ‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏°‡∏≠
      await sendSMS(
        `üì± ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${name} (${item.userID}) ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${item.status} ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ${dateStr}`
      );

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á SMS (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î)
      if (settings.sms === 'enabled') {
        await sendSMS(
          `üì± ‡∏Ñ‡∏∏‡∏ì ${name}, ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (${dateStr}) ‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î`
        );
      }
    }

    return NextResponse.json({ success: true, message: 'Notifications processed' });
  } catch (err) {
    console.error('Error in checkReminders:', err);
    return NextResponse.json({ success: false, message: err.message }, { status: 500 });
  }
}
