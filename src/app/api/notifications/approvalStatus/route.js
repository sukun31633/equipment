import { NextResponse } from 'next/server';
import pool from '../../../../../lib/mysql';
import nodemailer from 'nodemailer';
import twilio from 'twilio';

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Email --
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASS,
  },
});

async function sendEmail(to, subject, html) {
  try {
    await transporter.sendMail({
      from: process.env.GMAIL_USER,
      to,
      subject,
      html,
    });
    console.log(`‚úÖ Email sent to ${to}`);
  } catch (err) {
    console.error(`‚ùå Failed to send Email to ${to}:`, err);
  }
}

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á SMS --
const twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// ‚ùó ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMS
const ADMIN_PHONE_NUMBER = '0999719451';

async function sendSMS(message) {
  try {
    const to = ADMIN_PHONE_NUMBER.startsWith('0') ? '+66' + ADMIN_PHONE_NUMBER.slice(1) : ADMIN_PHONE_NUMBER;
    await twilioClient.messages.create({
      body: message,
      from: process.env.TWILIO_PHONE_NUMBER,
      to,
    });
    console.log(`‚úÖ SMS sent to ${to}`);
  } catch (err) {
    console.error(`‚ùå Failed to send SMS to ${ADMIN_PHONE_NUMBER}:`, err);
  }
}

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò --
async function notifyUserApproval({ userID, equipmentName, status, type }) {
  try {
    const [[user]] = await pool.query(
      `SELECT email, smsNotification, emailNotification FROM user WHERE userID = ?`,
      [userID]
    );

    if (!user) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ userID:', userID);
      return;
    }

    const { email, smsNotification, emailNotification } = user;
    const actionText = status === 'approved' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
    const typeText = type === 'borrow' ? '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' : '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á';

    const emailSubject = `üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£${typeText}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå`;
    const emailBody = `
      <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô,</p>
      <p>‡∏ú‡∏•‡∏Å‡∏≤‡∏£${typeText}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</p>
      <ul>
        <li><b>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipmentName}</li>
        <li><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${actionText}</li>
      </ul>
      <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
    `;

    const smsMessage = `üì¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•${typeText}: ${equipmentName} ‡∏ñ‡∏π‡∏Å${actionText}`;

    // -- ‡∏™‡πà‡∏á SMS ‡πÑ‡∏õ‡πÄ‡∏ö‡∏≠‡∏£‡πå 0999719451 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (smsNotification === 'enabled') {
      await sendSMS(smsMessage);
    }

    // -- ‡∏™‡πà‡∏á Email ‡πÑ‡∏õ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (emailNotification === 'enabled' && email) {
      await sendEmail(email, emailSubject, emailBody);
    }

    console.log(`‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏• ${status} ‡πÉ‡∏´‡πâ userID ${userID} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  } catch (error) {
    console.error('‚ùå Error notifying user approval status:', error);
  }
}

// -- ‡∏ï‡∏±‡∏ß API Route ‡∏´‡∏•‡∏±‡∏Å --
export async function POST(req) {
  try {
    const { userID, equipmentName, status, type } = await req.json();

    if (!userID || !equipmentName || !status || !type) {
      return NextResponse.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' }, { status: 400 });
    }

    await notifyUserApproval({ userID, equipmentName, status, type });

    return NextResponse.json({ success: true, message: '‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('‚ùå Error sending user notification:', error);
    return NextResponse.json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }, { status: 500 });
  }
}
