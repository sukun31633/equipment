"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { ArrowLeft, Save } from "lucide-react";

export default function EditEquipmentPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const id = searchParams.get("id");

  const [equipment, setEquipment] = useState({
    name: "",
    brand: "",
    category: "",
    equipment_code: "",
    location: "",
    description: "",
  });

  const [loading, setLoading] = useState(true);

  // ЁЯФ╣ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И
  const categoryOptions = ["р╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣Мр╕нр╕╖р╣Ир╕Щр╣Ж", "Network", "IOT"];

  useEffect(() => {
    if (!id) {
      alert("тЭМ р╣Др╕бр╣Ир╕Юр╕Ъ ID р╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М");
      router.push("/admin/view-equipment");
      return;
    }

    const fetchEquipment = async () => {
      try {
        const res = await fetch(`/api/view-equipment?id=${id}`);
        const data = await res.json();

        if (data.success && data.data.length > 0) {
          setEquipment(data.data[0]);
        } else {
          alert("тЪая╕П р╣Др╕бр╣Ир╕Юр╕Ър╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣Мр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В");
          router.push("/admin/view-equipment");
        }
      } catch (error) {
        console.error("тЪая╕П р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:", error);
        alert("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣Мр╣Др╕Фр╣Й");
        router.push("/admin/view-equipment");
      } finally {
        setLoading(false);
      }
    };

    fetchEquipment();
  }, [id]);

  const handleChange = (e) => {
    setEquipment({ ...equipment, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch(`/api/update-equipment`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(equipment),
      });

      const data = await res.json();
      if (data.success) {
        alert("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣Мр╕кр╕│р╣Ар╕гр╣Зр╕И");
        router.push("/admin/view-equipment");
      } else {
        alert("тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Фр╣Й");
      }
    } catch (error) {
      console.error("тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:", error);
      alert("тЪая╕П р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е");
    }
  };

  if (loading) return <p className="text-center text-gray-600">тП│ р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е...</p>;

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-6">
      {/* ЁЯФ╣ Header */}
      <div className="w-full max-w-2xl bg-white p-4 shadow-lg flex items-center justify-between rounded-lg mb-6">
        <button onClick={() => router.back()} className="text-blue-500 flex items-center">
          <ArrowLeft size={24} className="mr-2" /> р╕Бр╕ер╕▒р╕Ъ
        </button>
        <h2 className="text-lg font-semibold text-gray-800">ЁЯЫая╕П р╣Бр╕Бр╣Йр╣Др╕Вр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М</h2>
      </div>

      {/* ЁЯФ╣ Form р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕е */}
      <form onSubmit={handleSubmit} className="w-full max-w-2xl bg-white p-6 shadow-lg rounded-lg">
        <div className="grid grid-cols-1 gap-4">
          {/* ЁЯФ╣ р╕Кр╕╖р╣Ир╕нр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯУж р╕Кр╕╖р╣Ир╕нр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М</label>
            <input
              type="text"
              name="name"
              value={equipment.name}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* ЁЯФ╣ р╕вр╕╡р╣Ир╕лр╣Йр╕н */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯП╖я╕П р╕вр╕╡р╣Ир╕лр╣Йр╕н</label>
            <input
              type="text"
              name="brand"
              value={equipment.brand}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          </div>

          {/* ЁЯФ╣ р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И (Dropdown) */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯУВ р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И</label>
            <select
              name="category"
              value={equipment.category}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none bg-white"
            >
              {categoryOptions.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
          </div>

          {/* ЁЯФ╣ р╕гр╕лр╕▒р╕кр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯУж р╕гр╕лр╕▒р╕кр╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М</label>
            <input
              type="text"
              name="equipment_code"
              value={equipment.equipment_code}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          {/* ЁЯФ╣ р╕Чр╕╡р╣Ир╣Ар╕Бр╣Зр╕Ър╕нр╕╕р╕Ыр╕Бр╕гр╕Ур╣М */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯУН р╕Чр╕╡р╣Ир╣Ар╕Бр╣Зр╕Ъ</label>
            <input
              type="text"
              name="location"
              value={equipment.location}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            />
          </div>

          {/* ЁЯФ╣ р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф */}
          <div>
            <label className="block text-gray-700 font-medium">ЁЯУЬ р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф</label>
            <textarea
              name="description"
              value={equipment.description}
              onChange={handleChange}
              className="w-full border p-2 rounded-lg mt-1 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              rows="3"
            />
          </div>

          {/* ЁЯФ╣ р╕Ыр╕╕р╣Ир╕бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={() => router.back()}
              className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition"
            >
               р╕вр╕Бр╣Ар╕ер╕┤р╕Б
            </button>
            <button
              type="submit"
              className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center hover:bg-blue-600 transition"
            >
              <Save size={18} className="mr-2" />  р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
