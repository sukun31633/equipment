"use client"; // Client Component

import { useState, useEffect, useRef } from "react";
import { useSession, signOut } from "next-auth/react";
import { Switch } from "@headlessui/react";
import NavigationBar from "../components/NavigationBar";
import { Loader2 } from "lucide-react";

export default function ProfilePage() {
  const { data: session, status } = useSession();
  const [smsNotification, setSmsNotification] = useState(false);
  const [emailNotification, setEmailNotification] = useState(false);
  const isInitialMount = useRef(true);

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ session
  useEffect(() => {
    if (session) {
      const fetchNotificationSettings = async () => {
        try {
          const res = await fetch(`/api/get-notifications?userId=${session.user.id}`, {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          });
          const data = await res.json();
          if (data.success) {
            setSmsNotification(data.smsNotification === "enabled");
            setEmailNotification(data.emailNotification === "enabled");
          } else {
            console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
          }
          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î isInitialMount ‡πÄ‡∏õ‡πá‡∏ô false
          isInitialMount.current = false;
        } catch (error) {
          console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error);
          isInitialMount.current = false;
        }
      };
      fetchNotificationSettings();
    }
  }, [session]);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô initial mount)
  useEffect(() => {
    if (!session || isInitialMount.current) return;

    const updateNotificationSettings = async () => {
      try {
        const res = await fetch("/api/update-notifications", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: session.user.id,
            smsNotification: smsNotification ? "enabled" : "disabled",
            emailNotification: emailNotification ? "enabled" : "disabled",
          }),
        });
        const data = await res.json();
        if (data.success) {
          console.log("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
        } else {
          console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
        }
      } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error);
      }
    };

    updateNotificationSettings();
  }, [smsNotification, emailNotification, session]);

  if (status === "loading") {
    return <div className="text-center text-white mt-10">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  }
    if (status === "loading") {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-blue-500 to-indigo-600">
        <Loader2 size={64} className="animate-spin text-white" />
      </div>
    );
  }
  if (!session) {
    return <div className="text-center text-white mt-10">‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-indigo-600 flex flex-col items-center p-6 pb-24 w-full">
      {/* Header */}
      <div className="w-full max-w-4xl p-4 bg-white shadow-lg flex items-center justify-center rounded-lg">
        <h2 className="text-2xl font-bold text-blue-700">üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h2>
      </div>

      {/* Content */}
      <div className="w-full max-w-4xl mt-6 space-y-6">
        <div className="bg-white p-6 shadow-xl rounded-xl hover:shadow-2xl transition">
          <h3 className="text-blue-700 font-bold text-lg mb-4">üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
          <p className="text-gray-800">
            üîπ <strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {session.user.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
          </p>
          <p className="text-gray-800">
            üìß <strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå:</strong> {session.user.email || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
          </p>
          <p className="text-gray-800">
            üÜî <strong>‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß:</strong> {session.user.id || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
          </p>
          <p className="text-gray-800">
            üìû <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {session.user.phoneNumber || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
          </p>
        </div>

        <div className="bg-white p-6 shadow-xl rounded-xl hover:shadow-2xl transition">
          <h3 className="text-blue-700 font-bold text-lg mb-4">üîî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
          <div className="flex items-center justify-between mb-4">
            <span className="text-gray-800">üì± ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô SMS</span>
            <Switch
              checked={smsNotification}
              onChange={setSmsNotification}
              className={`${smsNotification ? "bg-blue-500" : "bg-gray-300"} relative inline-flex h-6 w-11 items-center rounded-full transition`}
            >
              <span className="sr-only">Enable SMS Notification</span>
              <span
                className={`${smsNotification ? "translate-x-6" : "translate-x-1"} inline-block h-4 w-4 transform bg-white rounded-full transition`}
              />
            </Switch>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-gray-800">üì© ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Email</span>
            <Switch
              checked={emailNotification}
              onChange={setEmailNotification}
              className={`${emailNotification ? "bg-blue-500" : "bg-gray-300"} relative inline-flex h-6 w-11 items-center rounded-full transition`}
            >
              <span className="sr-only">Enable Email Notification</span>
              <span
                className={`${emailNotification ? "translate-x-6" : "translate-x-1"} inline-block h-4 w-4 transform bg-white rounded-full transition`}
              />
            </Switch>
          </div>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
        <div className="w-full max-w-4xl mt-4 flex justify-end">
          <button
            onClick={() => signOut({ callbackUrl: "/" })}
            className="bg-red-500 text-white px-4 py-2 rounded-md shadow-md hover:bg-red-600 transition"
          >
            ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
          </button>
        </div>
      </div>

      <NavigationBar />
    </div>
  );
}