import { NextResponse } from 'next/server';
import pool from '../../../../../lib/mysql';
import nodemailer from 'nodemailer';
import twilio from 'twilio';

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Email --
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASS,
  },
});

async function sendEmail(to, subject, html) {
  await transporter.sendMail({
    from: process.env.GMAIL_USER,
    to,
    subject,
    html,
  });
}

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á SMS --
const twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

async function sendSMS(message, toPhone) {
  const to = toPhone.startsWith('0') ? '+66' + toPhone.slice(1) : toPhone;
  await twilioClient.messages.create({
    body: message,
    from: process.env.TWILIO_PHONE_NUMBER,
    to,
  });
}

// -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô admin --
async function notifyAdminNewRequest({ equipmentID, reserverName, type }) {
  const [[equipment]] = await pool.query(
    `SELECT name FROM equipment WHERE id = ?`,
    [equipmentID]
  );

  const equipmentName = equipment?.name || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
  const action = type === 'borrow' ? '‡∏¢‡∏∑‡∏°' : '‡∏à‡∏≠‡∏á';

  const adminEmail = 'jingpt888@gmail.com'; 
  const adminPhone = '0999719451';              

  const emailSubject = `üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£${action}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà`;
  const emailBody = `
    <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà,</p>
    <p>‡∏°‡∏µ‡∏Å‡∏≤‡∏£${action}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà:</p>
    <ul>
      <li><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ${action}:</b> ${reserverName}</li>
      <li><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipmentName}</li>
    </ul>
    <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</p>
  `;

  const smsMessage = `üì¢ ${reserverName} ${action}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${equipmentName}`;

  await sendEmail(adminEmail, emailSubject, emailBody);
  await sendSMS(smsMessage, adminPhone);

  console.log('‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

  // ‚ú® ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
  return {
    reserverName,
    equipmentName,
    action,
  };
}

// -- ‡∏ï‡∏±‡∏ß API route (main) --
export async function POST(req) {
  try {
    const { equipmentID, reserverName, type } = await req.json();

    if (!equipmentID || !reserverName || !type) {
      return NextResponse.json(
        { success: false, message: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
        { status: 400 }
      );
    }

    const result = await notifyAdminNewRequest({ equipmentID, reserverName, type });

    return NextResponse.json({
      success: true,
      message: '‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      reserverName: result.reserverName,
      equipmentName: result.equipmentName,
      action: result.action,
    });
  } catch (error) {
    console.error('‚ùå Error sending notification:', error);
    return NextResponse.json(
      { success: false, message: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' },
      { status: 500 }
    );
  }
}
