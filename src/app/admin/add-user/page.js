"use client";

import { useState } from "react";
import { Eye, EyeOff, ArrowLeft, Users } from "lucide-react";
import { useRouter } from "next/navigation";

export default function AddUserPage() {
  const router = useRouter();

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [phone, setPhone] = useState("");
  const [email, setEmail] = useState("");
  const [idNumber, setIdNumber] = useState("");
  const [userType, setUserType] = useState("‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const handleBack = () => {
    router.back();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Build payload object
    const payload = {
      firstName,
      lastName,
      phone,
      email,
      idNumber,
      userType,
      password,
    };

    try {
      const res = await fetch("/api/add-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const data = await res.json();
      if (data.success) {
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        router.back();
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
      }
    } catch (error) {
      console.error("Error saving user:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-gray-300 flex flex-col items-center p-6 pb-24">
      {/* Header Section */}
      <div className="w-full max-w-4xl bg-white p-4 shadow-lg flex items-center justify-between rounded-lg mb-6">
        <div className="flex items-center">
          <button onClick={handleBack} className="text-blue-500 hover:text-blue-700 transition">
            <ArrowLeft size={26} />
          </button>
          <h2 className="text-xl font-semibold text-gray-800 ml-4">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h2>
        </div>
      </div>

      {/* Form Section */}
      <form onSubmit={handleSubmit} className="w-full max-w-4xl bg-white p-6 shadow-md rounded-lg">
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
          <input
            type="text"
            value={firstName}
            onChange={(e) => setFirstName(e.target.value)}
            placeholder="üîπ ‡∏ä‡∏∑‡πà‡∏≠"
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input
            type="text"
            value={lastName}
            onChange={(e) => setLastName(e.target.value)}
            placeholder="üîπ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
          <input
            type="text"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            placeholder="üîπ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="üîπ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå"
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß</label>
          <input
            type="text"
            value={idNumber}
            onChange={(e) => setIdNumber(e.target.value)}
            placeholder="üîπ ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß"
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
            required
          />
        </div>
        {/* Dropdown: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</label>
          <select
            value={userType}
            onChange={(e) => setUserType(e.target.value)}
            className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
          >
            <option>‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
            <option>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</option>
            <option>‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</option>
          </select>
        </div>
        {/* Input: ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-1 text-gray-700">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
          <div className="relative">
            <input
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="üîí ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              className="w-full border p-3 rounded border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none text-gray-800"
              required
            />
            <button
              type="button"
              className="absolute right-3 top-3 text-blue-500 hover:text-blue-700 transition"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeOff size={22} /> : <Eye size={22} />}
            </button>
          </div>
        </div>
        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        <button
          type="submit"
          className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 text-white py-3 rounded-lg hover:from-blue-600 hover:to-indigo-600 transition text-lg font-semibold shadow-md"
        >
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </button>
      </form>
    </div>
  );
}
